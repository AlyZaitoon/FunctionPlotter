# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Function_plotter.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

#imports of used libraries
from PyQt5 import QtCore, QtGui, QtWidgets
from numpy import *
import matplotlib.pyplot as plt
import re
from PyQt5.QtWidgets import QMessageBox
#stringstring2funcvalidation function makes sure that enetered function contains the only allowed words in math expression 
# also it replaces the power symbol with its python equivalent 
replacements = {
    '^': '**',
}

allowed_words = [
    'x',
    'sin',
    'cos',
    'exp',
]

def string2funcvalidation(string):
    ''' validates enetered function and replaces power sign with its equivalent '''
    # find all words and check if all are allowed:
    for word in re.findall('[a-zA-Z_]+', string):
        if word not in allowed_words:
            raise ValueError(
                '"{}" is forbidden to use in math expression'.format(word)
            )

    for old, new in replacements.items():
        string = string.replace(old, new)
    
    return string
#isfloat is a simple function to know whether a number is float or not
def isfloat(num):
    try :
        float(num)
        res=True
    except:
        res=False
    return res
#ui_functionplotter is the class of the main window of the gui that contains all the buttons and labels and textedits and lineedits
class Ui_FunctionPlotter(QtWidgets.QMainWindow):
    #setupUi function defines all the mainwindow components (Qtwidgets) window,buttons,textedit,linedit,labels,messageboxes and thier position 
    #also it links every button with its callback function
    #it sets the attributes of the Qtobjects to desired values
    def setupUi(self):
        #defining the window and setting its attributes like size
        self.setObjectName("FunctionPlotter")
        self.resize(782, 600)
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")
        #defining buttons and labels and line edits and function text edit 
        self.variableButton = QtWidgets.QPushButton(self.centralwidget)
        self.variableButton.setGeometry(QtCore.QRect(490, 260, 93, 28))
        self.variableButton.setObjectName("variableButton")
        self.decimalButton = QtWidgets.QPushButton(self.centralwidget)
        self.decimalButton.setGeometry(QtCore.QRect(290, 260, 93, 28))
        self.decimalButton.setObjectName("decimalButton")
        self.twoButton = QtWidgets.QPushButton(self.centralwidget)
        self.twoButton.setGeometry(QtCore.QRect(390, 290, 93, 28))
        self.twoButton.setObjectName("twoButton")
        self.threeButton = QtWidgets.QPushButton(self.centralwidget)
        self.threeButton.setGeometry(QtCore.QRect(490, 290, 93, 28))
        self.threeButton.setObjectName("threeButton")
        self.fiveButton = QtWidgets.QPushButton(self.centralwidget)
        self.fiveButton.setGeometry(QtCore.QRect(390, 320, 93, 28))
        self.fiveButton.setObjectName("fiveButton")
        self.sixButton = QtWidgets.QPushButton(self.centralwidget)
        self.sixButton.setGeometry(QtCore.QRect(490, 320, 93, 28))
        self.sixButton.setObjectName("sixButton")
        self.fourButton = QtWidgets.QPushButton(self.centralwidget)
        self.fourButton.setGeometry(QtCore.QRect(290, 320, 93, 28))
        self.fourButton.setObjectName("fourButton")
        self.eightButton = QtWidgets.QPushButton(self.centralwidget)
        self.eightButton.setGeometry(QtCore.QRect(390, 350, 93, 28))
        self.eightButton.setObjectName("eightButton")
        self.nineButton = QtWidgets.QPushButton(self.centralwidget)
        self.nineButton.setGeometry(QtCore.QRect(490, 350, 93, 28))
        self.nineButton.setObjectName("nineButton")
        self.sevenButton = QtWidgets.QPushButton(self.centralwidget)
        self.sevenButton.setGeometry(QtCore.QRect(290, 350, 93, 28))
        self.sevenButton.setObjectName("sevenButton")
        self.additionButton = QtWidgets.QPushButton(self.centralwidget)
        self.additionButton.setGeometry(QtCore.QRect(190, 290, 93, 28))
        self.additionButton.setObjectName("additionButton")
        self.subtractionButton = QtWidgets.QPushButton(self.centralwidget)
        self.subtractionButton.setGeometry(QtCore.QRect(190, 320, 93, 28))
        self.subtractionButton.setObjectName("subtractionButton")
        self.multiplicationButton = QtWidgets.QPushButton(self.centralwidget)
        self.multiplicationButton.setGeometry(QtCore.QRect(190, 350, 93, 28))
        self.multiplicationButton.setObjectName("multiplicationButton")
        self.divisionButton = QtWidgets.QPushButton(self.centralwidget)
        self.divisionButton.setGeometry(QtCore.QRect(190, 380, 93, 28))
        self.divisionButton.setObjectName("divisionButton")
        self.cosineButton = QtWidgets.QPushButton(self.centralwidget)
        self.cosineButton.setGeometry(QtCore.QRect(290, 380, 93, 28))
        self.cosineButton.setObjectName("cosineButton")
        self.exponentialButton = QtWidgets.QPushButton(self.centralwidget)
        self.exponentialButton.setGeometry(QtCore.QRect(490, 380, 93, 28))
        self.exponentialButton.setObjectName("exponentialButton")
        self.sineButton = QtWidgets.QPushButton(self.centralwidget)
        self.sineButton.setGeometry(QtCore.QRect(390, 380, 93, 28))
        self.sineButton.setObjectName("SineButton")
        self.powerButton = QtWidgets.QPushButton(self.centralwidget)
        self.powerButton.setGeometry(QtCore.QRect(190, 260, 93, 28))
        self.powerButton.setObjectName("powerButton")
        self.functionTextEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.functionTextEdit.setGeometry(QtCore.QRect(260, 190, 321, 41))
        self.functionTextEdit.setObjectName("functionTextEdit")
        self.functionLabel = QtWidgets.QLabel(self.centralwidget)
        self.functionLabel.setGeometry(QtCore.QRect(180, 190, 71, 41))
        self.functionLabel.setScaledContents(False)
        self.functionLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.functionLabel.setWordWrap(False)
        self.functionLabel.setObjectName("functionLabel")
        self.titleLabel = QtWidgets.QLabel(self.centralwidget)
        self.titleLabel.setGeometry(QtCore.QRect(240, 80, 301, 61))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        self.titleLabel.setFont(font)
        self.titleLabel.setObjectName("titleLabel")
        self.oneButton = QtWidgets.QPushButton(self.centralwidget)
        self.oneButton.setGeometry(QtCore.QRect(290, 290, 93, 28))
        self.oneButton.setObjectName("oneButton")
        self.zeroButton = QtWidgets.QPushButton(self.centralwidget)
        self.zeroButton.setGeometry(QtCore.QRect(390, 260, 93, 28))
        self.zeroButton.setObjectName("zeroButton")
        self.drawFunctionButton = QtWidgets.QPushButton(self.centralwidget)
        self.drawFunctionButton.setGeometry(QtCore.QRect(610, 450, 111, 31))
        self.drawFunctionButton.setObjectName("drawFunctionButton")
        self.minimumLabel = QtWidgets.QLabel(self.centralwidget)
        self.minimumLabel.setGeometry(QtCore.QRect(90, 450, 101, 31))
        self.minimumLabel.setObjectName("minimumLabel")
        self.maximumLabel = QtWidgets.QLabel(self.centralwidget)
        self.maximumLabel.setGeometry(QtCore.QRect(330, 450, 121, 31))
        self.maximumLabel.setObjectName("maximumLabel")
        self.MinimumLineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.MinimumLineEdit.setGeometry(QtCore.QRect(200, 450, 113, 31))
        self.MinimumLineEdit.setObjectName("MinimumLineEdit")
        self.MaximumLineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.MaximumLineEdit.setGeometry(QtCore.QRect(460, 450, 113, 31))
        self.MaximumLineEdit.setObjectName("MaximumLineEdit")
        self.setCentralWidget(self.centralwidget)
        #defining menu and status bars
        self.menubar = QtWidgets.QMenuBar(self)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 782, 26))
        self.menubar.setObjectName("menubar")
        self.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(self)
        self.statusbar.setObjectName("statusbar")
        self.setStatusBar(self.statusbar)
        #defining message boxes
        self.msgRange=QMessageBox()
        self.msgRange.setIcon(QMessageBox.Critical)
        self.msgRange.setWindowTitle("Alert Range")
        self.msgFunction=QMessageBox()
        self.msgFunction.setIcon(QMessageBox.Critical)
        self.msgFunction.setWindowTitle("Alert Function")
        self.msgRangenumeric=QMessageBox()
        self.msgRangenumeric.setIcon(QMessageBox.Critical)
        self.msgRangenumeric.setWindowTitle("Alert Range is not numeric value")
        #linking of buttons to callback function using lambda function
        self.variableButton.clicked.connect(lambda: self.type_function(self.variableButton.text()))
        self.multiplicationButton.clicked.connect(lambda: self.type_function(self.multiplicationButton.text()))
        self.divisionButton.clicked.connect(lambda: self.type_function(self.divisionButton.text()))
        self.powerButton.clicked.connect(lambda: self.type_function(self.powerButton.text()))
        self.additionButton.clicked.connect(lambda: self.type_function(self.additionButton.text()))
        self.subtractionButton.clicked.connect(lambda: self.type_function(self.subtractionButton.text()))
        self.sineButton.clicked.connect(lambda: self.type_function(self.sineButton.text()))
        self.cosineButton.clicked.connect(lambda: self.type_function(self.cosineButton.text()))
        self.exponentialButton.clicked.connect(lambda: self.type_function(self.exponentialButton.text()))
        self.zeroButton.clicked.connect(lambda: self.type_function(self.zeroButton.text()))
        self.oneButton.clicked.connect(lambda: self.type_function(self.oneButton.text()))
        self.twoButton.clicked.connect(lambda: self.type_function(self.twoButton.text()))
        self.threeButton.clicked.connect(lambda: self.type_function(self.threeButton.text()))
        self.fourButton.clicked.connect(lambda: self.type_function(self.fourButton.text()))
        self.fiveButton.clicked.connect(lambda: self.type_function(self.fiveButton.text()))
        self.sixButton.clicked.connect(lambda: self.type_function(self.sixButton.text()))
        self.sevenButton.clicked.connect(lambda: self.type_function(self.sevenButton.text()))
        self.eightButton.clicked.connect(lambda: self.type_function(self.eightButton.text()))
        self.nineButton.clicked.connect(lambda: self.type_function(self.nineButton.text()))
        self.decimalButton.clicked.connect(lambda: self.type_function(self.decimalButton.text()))
        self.drawFunctionButton.clicked.connect(lambda: self.plot_function(True))
        #retranslating the window by setting the text of all widgets with th required styling(css) 
        self.retranslateUi()
        #connecting slots by their name to the signals (callbackfunctions-->slots) (buttons-->make signal by every click)
        QtCore.QMetaObject.connectSlotsByName(self)
    #range_validation function makes sure that range values for plotting are not spaces
    def range_validation(self):
        if self.MaximumLineEdit.text()=="" and self.MinimumLineEdit.text()=="":
            self.msgRange.setText("U must enter Maximum and Minimum value for range")
            self.msgRange.show()
            return False
        elif self.MaximumLineEdit.text()=="":
            self.msgRange.setText("U must enter Maximum value for range")
            self.msgRange.show()
            return False
        elif self.MinimumLineEdit.text()=="":
            self.msgRange.setText("U must enter Minimum value for range")
            self.msgRange.show()
            return False
        return True
    #range_validation_numeric function makes sure that range values for plotting are numeric
    #also it makes sure that minimum value for range is less than the maximum value
    def range_validation_numeric(self):
        if not(isfloat(self.MaximumLineEdit.text())) and not(isfloat(self.MinimumLineEdit.text())):
            self.msgRangenumeric.setDetailedText("")
            self.msgRangenumeric.setText("U must enter a numeric value for range of plotting(space is not a numeric value)")
            self.msgRangenumeric.show()
            return False
        elif not(isfloat(self.MaximumLineEdit.text())):
            self.msgRangenumeric.setDetailedText("")
            self.msgRangenumeric.setText("U must enter a numeric value for maxiumum range of plotting(space is not a numeric value)")
            self.msgRangenumeric.show()
            return False
        elif not(isfloat(self.MinimumLineEdit.text())):
            self.msgRangenumeric.setDetailedText("")
            self.msgRangenumeric.setText("U must enter a numeric value for minimum range of plotting(space is not a numeric value)")
            self.msgRangenumeric.show()
            return False
        elif float(self.MinimumLineEdit.text())>float(self.MaximumLineEdit.text()):
            self.msgRangenumeric.setDetailedText("")
            self.msgRangenumeric.setWindowTitle("Alert Range")
            self.msgRangenumeric.setText("minimum value is larger than maximum value for range of plotting")
            self.msgRangenumeric.show()
            return False
        elif float(self.MinimumLineEdit.text())==float(self.MaximumLineEdit.text()):
            self.msgRangenumeric.setWindowTitle("Alert Range")
            self.msgRangenumeric.setText("minimum value is equal to maximum value for range of plotting")
            self.msgRangenumeric.setDetailedText("Range of plotting with equal minimum and maximum values means that u are ploting 1 point so plot will not be visible")
            self.msgRangenumeric.show()
            return False
        return True
    #function_validation function makes sure that there is a function entered (not a space)
    def function_validation(self):
        if self.functionTextEdit.toPlainText()=="":
            self.msgFunction.setText("U must enter a function to be plotted")
            self.msgFunction.show()
            return False
        return True
    #type_function is a function that writes the text received from the button that called it --> the button that sent the signal to this slot 
    def type_function(self,buttonText):
        self.functionTextEdit.setText(self.functionTextEdit.toPlainText() + str(buttonText))
    #plot_function plots the function entered by the user
    def plot_function(self,source):
        #calling all validation functions to make sure that the input by the user is valid 
        valid_function=self.function_validation()
        valid_range=self.range_validation()
        valid_range_numeric=self.range_validation_numeric()
        #if all inputs are valid start plotting
        if(valid_function and valid_range and valid_range_numeric):
            #define x as numpy array of 200 samples between minimum and maximum range    
            x= linspace(float(self.MinimumLineEdit.text()),float(self.MaximumLineEdit.text()),200)
            #evaluate y as numpy array also of 200 sample in the range of x's defined
            f=eval(string2funcvalidation(self.functionTextEdit.toPlainText()))
            #defining figure for plotting
            self.fig=plt.figure(figsize=(5,5))
            #clearing figure from any previous plots
            self.fig.clear()
            #plotting axis 
            plt.axhline(y=0,color="k")
            plt.axvline(x=0,color="k")
            #plotting the function
            plot = plt.plot(x,f)
            #make sure that the gui that caleed the function to show the plot not the testing code
            if(source):
                plt.show()
            #returing the plot for testing purposes
            return plot

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("FunctionPlotter", "MainWindow"))
        self.variableButton.setText(_translate("FunctionPlotter", "x"))
        self.decimalButton.setText(_translate("FunctionPlotter", "."))
        self.twoButton.setText(_translate("FunctionPlotter", "2"))
        self.threeButton.setText(_translate("FunctionPlotter", "3"))
        self.fiveButton.setText(_translate("FunctionPlotter", "5"))
        self.sixButton.setText(_translate("FunctionPlotter", "6"))
        self.fourButton.setText(_translate("FunctionPlotter", "4"))
        self.eightButton.setText(_translate("FunctionPlotter", "8"))
        self.nineButton.setText(_translate("FunctionPlotter", "9"))
        self.sevenButton.setText(_translate("FunctionPlotter", "7"))
        self.additionButton.setText(_translate("FunctionPlotter", "+"))
        self.subtractionButton.setText(_translate("FunctionPlotter", "-"))
        self.multiplicationButton.setText(_translate("FunctionPlotter", "*"))
        self.divisionButton.setText(_translate("FunctionPlotter", "/"))
        self.cosineButton.setText(_translate("FunctionPlotter", "cos(x)"))
        self.exponentialButton.setText(_translate("FunctionPlotter", "exp(x)"))
        self.sineButton.setText(_translate("FunctionPlotter", "sin(x)"))
        self.powerButton.setText(_translate("FunctionPlotter", "^"))
        self.functionLabel.setText(_translate("FunctionPlotter", "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600;\">f(x) =</span></p></body></html>"))
        self.titleLabel.setText(_translate("FunctionPlotter", "<html><head/><body><p align=\"center\"><span style=\" font-size:24pt; font-weight:600;\">Function Plotter</span></p></body></html>"))
        self.oneButton.setText(_translate("FunctionPlotter", "1"))
        self.zeroButton.setText(_translate("FunctionPlotter", "0"))
        self.drawFunctionButton.setText(_translate("FunctionPlotter", "Draw f(x)"))
        self.minimumLabel.setText(_translate("FunctionPlotter", "<html><head/><body><p><span style=\" font-size:10pt; font-weight:600;\">Minimum x:</span></p></body></html>"))
        self.maximumLabel.setText(_translate("FunctionPlotter", "<html><head/><body><p><span style=\" font-size:10pt; font-weight:600;\">Maximum x:</span></p></body></html>"))

#main function creating Qtapplication to execute and show the window
if __name__ == "__main__":
    import sys
    #defining the Qtapplication
    app = QtWidgets.QApplication(sys.argv)
    #defining the mainwindow object and setting it up and showing it
    FunctionPlotter  = Ui_FunctionPlotter()
    FunctionPlotter.setupUi()
    FunctionPlotter.show()
    #exiting the program
    sys.exit(app.exec_())
